import asyncio
import logging
from typing import Optional, Tuple
from aiogram import Router, types, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, InputFile
from external_services.backend_requests import create_user_by_telegram, upload_files
from keyboards.user_keyboards import upload_keyboard, comment_keyboard, start_upload_keyboard, consent_keyboard, ready_keyboard
import os
import cv2
import numpy as np
from io import BytesIO
import base64
from neiro.transform import decode_base64_to_image
from neiro.pipe import pipeline_caries
import uuid

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s %(message)s'
)

router = Router()

class ConsentStates(StatesGroup):
    waiting_for_consent = State()

# –ö–ª–∞—Å—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
class UploadStates(StatesGroup):
    waiting_for_front_teeth_photo = State()
    waiting_for_upper_teeth_gums_photo = State()
    waiting_for_lower_teeth_gums_photo = State()
    waiting_for_photo = State()
    waiting_for_comment = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def send_welcome(message: types.Message, state: FSMContext):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞. –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –ø–æ –µ–≥–æ Telegram ID.
    """
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑—É–±–æ–≤ \
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ \
—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∑—É–±–∞–º–∏, –Ω–æ —ç—Ç–æ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤–∏–∑–∏—Ç –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—Éü¶∑")

    await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, \
–≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. \
–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å [–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://example.com/privacy).",
                         reply_markup=consent_keyboard)
    await state.set_state(ConsentStates.waiting_for_consent)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(lambda call: call.data in ["consent_yes", "consent_no"])
async def handle_consent(call: types.CallbackQuery, state: FSMContext):
    if call.data == "consent_yes":
        await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ. /upload", reply_markup=start_upload_keyboard)
        await state.clear()
    else:
        await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞ /start.")
        await state.clear()
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upload
@router.message(Command(commands=['upload']))
async def start_upload(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    user_data[message.from_user.id] = {'photos': [], 'comment': ''}
    await send_preparation_instructions(message)

async def send_preparation_instructions(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å—ä–µ–º–∫–µ.
    """
    instructions = (
        "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–∏–º —Å–æ–≤–µ—Ç–∞–º:\n"
        "1. –ù–∞–π–¥–∏—Ç–µ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ.\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–ø—ã—à–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.\n"
        "3. –ü—Ä–æ—Ç—Ä–∏—Ç–µ –∫–∞–º–µ—Ä—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–∞–∑–º—ã—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
    )
    await message.answer(instructions, reply_markup=ready_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–æ–º–∞–Ω–¥—ã ready
@router.callback_query(lambda call: call.data == 'ready')
async def handle_ready(call: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤–æ' –∏ –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    """
    await request_front_teeth_photo(call.message)
    await state.set_state(UploadStates.waiting_for_front_teeth_photo)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def request_front_teeth_photo(message: types.Message):
    instructions = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥–Ω–∏—Ö –∑—É–±–æ–≤.\n"
        "–ö–æ–≥–¥–∞ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç."
    )
    await message.answer(instructions)

async def request_upper_teeth_gums_photo(message: types.Message):
    instructions = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –≤–µ—Ä—Ö–Ω–∏—Ö –∑—É–±–æ–≤ –∏ –¥–µ—Å–µ–Ω.\n"
        "–ö–æ–≥–¥–∞ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç."
    )
    await message.answer(instructions)

async def request_lower_teeth_gums_photo(message: types.Message):
    instructions = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∏–∂–Ω–∏—Ö –∑—É–±–æ–≤ –∏ –¥–µ—Å–µ–Ω.\n"
        "–ö–æ–≥–¥–∞ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç."
    )
    await message.answer(instructions)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@router.message(UploadStates.waiting_for_front_teeth_photo)
async def handle_front_teeth_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    is_blurry, result_image = await is_photo_blurry(message.bot, photo)
    if is_blurry:
        await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–µ—á–µ—Ç–∫–∏–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.")
        return
    user_data[message.from_user.id]['photos'].append(result_image)
    await request_upper_teeth_gums_photo(message)
    await state.set_state(UploadStates.waiting_for_upper_teeth_gums_photo)

@router.message(UploadStates.waiting_for_upper_teeth_gums_photo)
async def handle_upper_teeth_gums_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    is_blurry, result_image = await is_photo_blurry(message.bot, photo)
    if is_blurry:
        await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–µ—á–µ—Ç–∫–∏–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.")
        return
    user_data[message.from_user.id]['photos'].append(result_image)
    await request_lower_teeth_gums_photo(message)
    await state.set_state(UploadStates.waiting_for_lower_teeth_gums_photo)

@router.message(UploadStates.waiting_for_lower_teeth_gums_photo)
async def handle_lower_teeth_gums_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    is_blurry, result_image = await is_photo_blurry(message.bot, photo)
    if is_blurry:
        await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–µ—á–µ—Ç–∫–∏–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.")
        return
    user_data[message.from_user.id]['photos'].append(result_image)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ç—Ä–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    if len(user_data[message.from_user.id]['photos']) == 3:
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        combined_image = combine_images(user_data[message.from_user.id]['photos'])
        combined_image_path = save_combined_image(combined_image)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        await message.answer_photo(photo=FSInputFile(combined_image_path), caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.clear()
        user_data[message.from_user.id]['photos'] = []
    else:
        await request_next_photo(message, state)

def resize_image(image, width):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏.
    """
    aspect_ratio = image.shape[1] / image.shape[0]
    new_height = int(width / aspect_ratio)
    resized_image = cv2.resize(image, (width, new_height))
    return resized_image

def combine_images(images):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ, –∏–∑–º–µ–Ω—è—è –∏—Ö —Ä–∞–∑–º–µ—Ä –¥–æ –Ω–∞–∏–º–µ–Ω—å—à–µ–π —à–∏—Ä–∏–Ω—ã.
    """
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–º–µ–Ω—å—à—É—é —à–∏—Ä–∏–Ω—É —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    min_width = min(image.shape[1] for image in images)

    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ –Ω–∞–∏–º–µ–Ω—å—à–µ–π —à–∏—Ä–∏–Ω—ã
    resized_images = [resize_image(image, min_width) for image in images]

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
    combined_image = np.vstack(resized_images)
    return combined_image

def save_combined_image(image):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º.
    """
    combined_image_path = f"combined_result_{uuid.uuid4()}.jpg"
    cv2.imwrite(combined_image_path, image)
    return combined_image_path

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–æ–º–∞–Ω–¥—ã start_upload
@router.callback_query(lambda call: call.data == 'start_upload')
async def handle_start_upload(call: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–µ.
    """
    user_data[call.from_user.id] = {'photos': [], 'comment': ''}
    await send_preparation_instructions(call.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@router.callback_query(lambda call: call.data == 'upload_photo')
async def handle_photo_upload_callback(call: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    """
    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. üìé")
    await call.answer()

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Ä–ø–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏ –∫ 3 —Ñ–æ—Ç–æ
@router.message(UploadStates.waiting_for_photo, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id]['photos'].append(message.photo[-1].file_id)
    photos_count = len(user_data[user_id]['photos'])
    logger.info(f"User {user_id} uploaded photo {photos_count}.")

    # Check if all 3 photos are uploaded
    if photos_count == 1:
        photo_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "photos", "upper.jpg")
        photo=FSInputFile(photo_path)
        await message.answer_photo(
            photo=photo,
            caption="–§–æ—Ç–æ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–æ, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–µ—Ä—Ö–Ω–∏—Ö –∑—É–±–æ–≤.",
            reply_markup=upload_keyboard)
    elif photos_count == 2:
        photo_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "photos", "lower.jpg")
        photo=FSInputFile(photo_path)
        await message.answer_photo(
            photo=photo,
            caption="–§–æ—Ç–æ –≤–µ—Ä—Ö–Ω–µ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–æ, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∏–∂–Ω–∏—Ö –∑—É–±–æ–≤.",
            reply_markup=upload_keyboard)
    elif photos_count == 3:
        await message.answer("–í—Å–µ 3 —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.", reply_markup=comment_keyboard)
        await state.set_state(UploadStates.waiting_for_comment)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
@router.callback_query(lambda call: call.data == 'skip_photo')
async def skip_photo(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    logger.info(f"User {user_id} chose to skip photo upload.")
    # Add dummy photos to simulate 3 photo uploads
    user_data[user_id]['photos'] += ["dummy_photo_id"] * (3 - len(user_data[user_id]['photos']))
    await call.message.answer("–í—Å–µ 3 —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.", reply_markup=comment_keyboard)
    await state.set_state(UploadStates.waiting_for_comment)
    try:
        await call.answer()
    except Exception as e:
        logger.error(f"Failed to answer callback query: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–º NO comment
@router.callback_query(lambda call: call.data == 'skip_comment')
async def skip_comment(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    logger.info(f"User {user_id} chose to skip comment.")
    await send_photos_to_backend(call.message, user_id, user_data[user_id]['photos'], 'NO comments')
    await state.clear()
    try:
        await call.answer()
    except Exception as e:
        logger.error(f"Failed to answer callback query: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
@router.message(UploadStates.waiting_for_comment)
async def handle_comment(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id]['comment'] = message.text
    logger.info(f"User {user_id} provided a comment.")
    await send_photos_to_backend(message, user_id, user_data[user_id]['photos'], message.text)
    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async def send_photos_to_backend(message: types.Message, user_id: int, photos: list, comment: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ –±—ç–∫–µ–Ω–¥.
    """
    photo_files = []
    for idx, photo_id in enumerate(photos):
        logger.info(f"Processing photo {idx+1} for user {user_id}.")
        if photo_id != "dummy_photo_id":  # Check if the photo is not a dummy
            photo = await message.bot.get_file(photo_id)
            file = await message.bot.download_file(photo.file_path)
            photo_files.append((f"photo_{idx}.jpg", file.read()))

    logger.info(f"Uploading photos to backend for user {user_id} with comment: {comment}")
    try:
        response = await upload_files(str(user_id), photo_files, comment)

        if "detail" in response and "Mouth not detected" in response["detail"]:
            await message.answer("–ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑—É–±—ã.", reply_markup=start_upload_keyboard)
        elif "detail" in response and "Success" in response["detail"]:
            await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /upload", reply_markup=start_upload_keyboard)
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=types.ReplyKeyboardRemove())

    except Exception as e:
        logger.error(f"Failed to upload photos: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=types.ReplyKeyboardRemove())

async def is_photo_blurry(bot: Bot, photo: types.PhotoSize) -> Tuple[bool, Optional[np.ndarray]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ç–æ –Ω–µ—á–µ—Ç–∫–∏–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏.
    """
    file_info = await bot.get_file(photo.file_id)
    file = await bot.download_file(file_info.file_path)
    file_bytes = BytesIO(file.read())

    image = np.asarray(bytearray(file_bytes.read()), dtype="uint8")
    image = cv2.imdecode(image, cv2.IMREAD_GRAYSCALE)
    laplacian_var = cv2.Laplacian(image, cv2.CV_64F).var()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    image_base64 = base64.b64encode(file_bytes.getvalue()).decode('utf-8')

    test_list = [decode_base64_to_image(image_base64)]
    error, result_list, result_dict = await asyncio.to_thread(pipeline_caries, test_list)

    if error:
        logger.error(f"Error in pipeline_caries: {error}")
        return True, None

    return laplacian_var < 1, result_list[0]  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ—á–µ—Ç–∫–æ—Å—Ç–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–ø–∏—à–µ–º –ø–æ–∑–∂–µ
async def analyze_and_send_results(bot: Bot, message: types.Message, photos: list):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    results = []
    for photo_id in photos:
        photo = await bot.get_file(photo_id)
        file = await bot.download_file(photo.file_path)
        file_bytes = BytesIO(file.read())
        image = np.asarray(bytearray(file_bytes.read()), dtype="uint8")
        image = cv2.imdecode(image, cv2.IMREAD_GRAYSCALE)

        # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (MVP)
        laplacian_var = cv2.Laplacian(image, cv2.CV_64F).var()
        if laplacian_var < 1:
            results.append("–§–æ—Ç–æ –Ω–µ—á–µ—Ç–∫–æ–µ.")
        else:
            # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ (–±—É–¥–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∞–Ω –≤ –±—É–¥—É—â–µ–º)
            if detect_caries(image):
                results.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∞—Ä–∏–µ—Å.")
            elif detect_plaque(image):
                results.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞–ª–µ—Ç.")
            else:
                results.append("–ò–¥–µ–∞–ª—å–Ω—ã–µ –∑—É–±—ã.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    result_message = "\n".join(results)
    await message.answer(result_message)

def detect_caries(image):
    # –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞—Ä–∏–µ—Å–∞ (–±—É–¥–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º)
    return False

def detect_plaque(image):
    # –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞–ª–µ—Ç–∞ (–±—É–¥–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º)
    return False
