import logging
from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile
from external_services.backend_requests import create_user_by_telegram, upload_files
from keyboards.user_keyboards import upload_keyboard, comment_keyboard, start_upload_keyboard
import httpx
from typing import Tuple
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')

router = Router()

# –ö–ª–∞—Å—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
class UploadStates(StatesGroup):
    waiting_for_photo = State()
    waiting_for_comment = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())

async def send_welcome(message: types.Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞. –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –ø–æ –µ–≥–æ Telegram ID.
    """
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –≤ –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–≤–æ–∏ –∑—É–±–∫–∏ü¶∑")

    telegram_id = str(message.from_user.id)

    try:
        logger.info(f"Sending request to API with params {telegram_id}")
        response = await create_user_by_telegram(telegram_id)
        logger.info(f"Response status code: {response.status_code}")
        logger.info(f"Response content: {response.json()}")
        if response.status_code == 200:
            # await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É!")
            await message.answer("–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /upload", reply_markup=start_upload_keyboard)
        elif response.status_code == 201:
            # await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É!")
            await message.answer("–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /upload", reply_markup=start_upload_keyboard)
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except httpx.RequestError as e:
        logger.error(f"Failed to create user: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upload
@router.message(Command(commands=['upload']))
async def start_upload(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    user_data[message.from_user.id] = {'photos': [], 'comment': ''}
    photo_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "photos", "front.jpg")
    photo = FSInputFile(photo_path)
    await message.answer_photo(
        photo=photo,
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –∑—É–±–æ–≤.",
        caption="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –∑—É–±–æ–≤.",
        reply_markup=upload_keyboard)
    await state.set_state(UploadStates.waiting_for_photo)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–æ–º–∞–Ω–¥—ã start_upload
@router.callback_query(lambda call: call.data == 'start_upload')
async def handle_start_upload(call: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–µ.
    """
    user_id = call.from_user.id
    user_data[user_id] = {'photos': [], 'comment': ''}
    photo_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "photos", "front.jpg")
    photo=FSInputFile(photo_path)
    await call.message.answer_photo(
        photo=photo,
        #text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –∑—É–±–æ–≤.",
        caption="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –∑—É–±–æ–≤.",
        reply_markup=upload_keyboard)
    await state.set_state(UploadStates.waiting_for_photo)
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@router.callback_query(lambda call: call.data == 'upload_photo')
async def handle_photo_upload_callback(call: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    """
    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. üìé")
    await call.answer()

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Ä–ø–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏ –∫ 3 —Ñ–æ—Ç–æ
@router.message(UploadStates.waiting_for_photo, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id]['photos'].append(message.photo[-1].file_id)
    photos_count = len(user_data[user_id]['photos'])
    logger.info(f"User {user_id} uploaded photo {photos_count}.")

    # Check if all 3 photos are uploaded
    if photos_count == 1:
        photo_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "photos", "upper.jpg")
        photo=FSInputFile(photo_path)
        await message.answer_photo(
            photo=photo,
            caption="–§–æ—Ç–æ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–æ, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–µ—Ä—Ö–Ω–∏—Ö –∑—É–±–æ–≤.",
            reply_markup=upload_keyboard)
    elif photos_count == 2:
        photo_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "photos", "lower.jpg")
        photo=FSInputFile(photo_path)
        await message.answer_photo(
            photo=photo,
            caption="–§–æ—Ç–æ –≤–µ—Ä—Ö–Ω–µ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–æ, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∏–∂–Ω–∏—Ö –∑—É–±–æ–≤.",
            reply_markup=upload_keyboard)
    elif photos_count == 3:
        await message.answer("–í—Å–µ 3 —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.", reply_markup=comment_keyboard)
        await state.set_state(UploadStates.waiting_for_comment)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
@router.callback_query(lambda call: call.data == 'skip_photo')
async def skip_photo(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    logger.info(f"User {user_id} chose to skip photo upload.")
    # Add dummy photos to simulate 3 photo uploads
    user_data[user_id]['photos'] += ["dummy_photo_id"] * (3 - len(user_data[user_id]['photos']))
    await call.message.answer("–í—Å–µ 3 —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.", reply_markup=comment_keyboard)
    await state.set_state(UploadStates.waiting_for_comment)
    try:
        await call.answer()
    except Exception as e:
        logger.error(f"Failed to answer callback query: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–º NO comment
@router.callback_query(lambda call: call.data == 'skip_comment')
async def skip_comment(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    logger.info(f"User {user_id} chose to skip comment.")
    await send_photos_to_backend(call.message, user_id, user_data[user_id]['photos'], 'NO comments')
    await state.clear()
    try:
        await call.answer()
    except Exception as e:
        logger.error(f"Failed to answer callback query: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
@router.message(UploadStates.waiting_for_comment)
async def handle_comment(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id]['comment'] = message.text
    logger.info(f"User {user_id} provided a comment.")
    await send_photos_to_backend(message, user_id, user_data[user_id]['photos'], message.text)
    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async def send_photos_to_backend(message: types.Message, user_id: int, photos: list, comment: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ –±—ç–∫–µ–Ω–¥.
    """
    photo_files = []
    for idx, photo_id in enumerate(photos):
        logger.info(f"Processing photo {idx+1} for user {user_id}.")
        if photo_id != "dummy_photo_id":  # Check if the photo is not a dummy
            photo = await message.bot.get_file(photo_id)
            file = await message.bot.download_file(photo.file_path)
            photo_files.append((f"photo_{idx}.jpg", file.read()))

    logger.info(f"Uploading photos to backend for user {user_id} with comment: {comment}")
    try:
        response = await upload_files(str(user_id), photo_files, comment)

        if "detail" in response and "Mouth not detected" in response["detail"]:
            await message.answer("–ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑—É–±—ã.", reply_markup=start_upload_keyboard)
        elif "detail" in response and "Success" in response["detail"]:
            await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /upload", reply_markup=start_upload_keyboard)
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=types.ReplyKeyboardRemove())

    except Exception as e:
        logger.error(f"Failed to upload photos: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=types.ReplyKeyboardRemove())
