import asyncio
import logging
from io import BytesIO
from aiogram.types import BufferedInputFile
from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ..keyboards.user_keyboards import *
from ..queue.rabbitmq_client import rpc_call
import base64

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
router = Router()

user_data = {}


class ConsentStates(StatesGroup):
    waiting_for_consent = State()


class UploadStates(StatesGroup):
    waiting_for_photos = State()


class FeedbackStates(StatesGroup):
    waiting_for_feedback = State()


# --------------------- –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---------------------
@router.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∑–∞–ø—Ä–æ—Å–æ–º —Å–æ–≥–ª–∞—Å–∏—è"""
    logger.info(f"User {message.from_user.id} started bot")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑—É–±–æ–≤ "
        "—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –í—ã –ø–æ–ª—É—á–∏—Ç–µ "
        "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∑—É–±–∞–º–∏, –Ω–æ —ç—Ç–æ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç "
        "–≤–∏–∑–∏—Ç –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É ü¶∑"
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –∏ —Å—Å—ã–ª–∫–æ–π
    privacy_policy_link = "<a href='https://docs.google.com/document/d/1vBwBFJbYjn_jLhNvjALf_auXysNFzPmdh0mE6XV0_YI/edit?usp=sharing'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º</a>"
    await message.answer(
        f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É "
        f"–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç "
        f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. "
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å {privacy_policy_link}.",
        parse_mode="HTML",
        reply_markup=consent_keyboard  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è
    )
    await state.set_state(ConsentStates.waiting_for_consent)


@router.callback_query(ConsentStates.waiting_for_consent, F.data == "consent_yes")
async def consent_yes(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è —Å –ø–æ–∫–∞–∑–æ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    logger.info(f"User {call.from_user.id} gave consent")
    await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await call.message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π:", reply_markup=main_keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    await show_instructions(call.message)

    await state.clear()


@router.callback_query(ConsentStates.waiting_for_consent, F.data == "consent_no")
async def consent_no(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞"""
    logger.info(f"User {call.from_user.id} declined consent")
    await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ
    await call.message.answer(
        "‚ùå –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. "
        "–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.",
        reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    )
    await state.clear()


async def show_instructions(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å —Ñ–æ—Ç–æ"""
    instructions = (
        "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–∏–º —Å–æ–≤–µ—Ç–∞–º:\n"
        "1. –ù–∞–π–¥–∏—Ç–µ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ.\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–ø—ã—à–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.\n"
        "3. –ü—Ä–æ—Ç—Ä–∏—Ç–µ –∫–∞–º–µ—Ä—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–∞–∑–º—ã—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
    )

    # –ü—É—Ç—å –∫ –ø—Ä–∏–º–µ—Ä—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
    example_photo_path = "bot/handlers/photo_2024-04-19_17-40-12.jpg"

    await message.answer(instructions)
    await message.answer_photo(types.FSInputFile(example_photo_path))


# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def show_instructions_command(message: types.Message):
    """–ü–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    logger.info(f"User {message.from_user.id} requested instructions")
    await show_instructions(message)


@router.callback_query(ConsentStates.waiting_for_consent, F.data == "consent_no")
async def consent_no(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞"""
    logger.info(f"User {call.from_user.id} declined consent")
    await call.message.edit_reply_markup()
    await call.message.answer("‚ùå –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
    await state.clear()


# --------------------- –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ---------------------
@router.message(F.text == "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
@router.message(Command("feedback"))
async def feedback_command(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    logger.info(f"User {message.from_user.id} requested feedback")
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=cancel_keyboard)
    await state.set_state(FeedbackStates.waiting_for_feedback)


@router.message(FeedbackStates.waiting_for_feedback)
async def process_feedback(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞"""
    logger.info(f"Feedback from {message.from_user.id}: {message.text}")
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=main_keyboard)
    await state.clear()


# --------------------- –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---------------------
@router.message(F.text == "üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
async def start_upload(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    logger.info(f"User {message.from_user.id} started photo upload")
    user_data[message.from_user.id] = {"photos": []}
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑—É–±–æ–≤:", reply_markup=upload_keyboard)
    await state.set_state(UploadStates.waiting_for_photos)


@router.message(UploadStates.waiting_for_photos, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ"""
    user_id = message.from_user.id
    user_data[user_id]["photos"].append(message.photo[-1].file_id)

    logger.info(f"User {user_id} uploaded photo {len(user_data[user_id]['photos'])}")

    if len(user_data[user_id]["photos"]) >= 3:
        await message.answer("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ!", reply_markup=main_keyboard)
        await finish_upload(message, state)
        #await state.clear()
    else:
        await message.answer(f"‚úÖ –§–æ—Ç–æ {len(user_data[user_id]['photos'])}/3 –ø—Ä–∏–Ω—è—Ç–æ!")


@router.message(UploadStates.waiting_for_photos, F.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")
async def finish_upload(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not user_data.get(user_id) or len(user_data[user_id]["photos"]) == 0:
        await message.answer("‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", reply_markup=main_keyboard)
        return

    await message.answer("üì° –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
    photos_base64 = []
    for file_id in user_data[user_id]["photos"]:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
            file = await message.bot.get_file(file_id)
            if not file.file_path:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É {file_id}")
                continue

            # –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            file_data = await message.bot.download_file(file.file_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            encoded = base64.b64encode(file_data.read()).decode('utf-8')
            logger.info(f"–ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ {file_id}, –¥–ª–∏–Ω–∞: {len(encoded)}")

            photos_base64.append(encoded)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
            continue

    # –§–æ—Ä–º–∏—Ä—É–µ–º payload —Å base64
    payload = {
        "user_id": user_id,
        "photos": photos_base64
    }

    try:
        response = await rpc_call(payload)
    except Exception as e:
        logger.error(f"RPC –æ—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", reply_markup=main_keyboard)
        return

    mouth_type = response.get("mouth_type", [])
    result_list = response.get("result_list", [])

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º mouth_type –≤ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    type_mapping = {
        "Front view": "–ü–µ—Ä–µ–¥–Ω–∏–µ –∑—É–±—ã",
        "Upper Jaw": "–í–µ—Ä—Ö–Ω—è—è —á–µ–ª—é—Å—Ç—å",
        "Lower Jaw": "–ù–∏–∂–Ω—è—è —á–µ–ª—é—Å—Ç—å"
    }
    ru_type = [type_mapping.get(item, "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ") for item in mouth_type]

    formatted_text = "ü¶∑–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∑—É–±–æ–≤:\n" + "\n".join(
        f"üì∏ –§–æ—Ç–æ {i + 1}: <b>{item}</b>" for i, item in enumerate(ru_type)
    )
    await message.answer(formatted_text, parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
    for photo_b64 in result_list:
        photo_bytes = base64.b64decode(photo_b64, validate=True)
        photo_file = BufferedInputFile(photo_bytes, filename="processed.jpg")
        await message.bot.send_photo(message.chat.id, photo_file)

    await message.answer(
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
        "üî¥ –ö—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∞—Ä–∏–µ—Å\n"
        "üîµ –°–∏–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç: –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä–∏–µ—Å",
        reply_markup=main_keyboard
    )

    await state.clear()
    user_data.pop(user_id, None)


@router.message(UploadStates.waiting_for_photos, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_upload(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    logger.info(f"User {message.from_user.id} canceled upload")
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_keyboard)
    await state.clear()